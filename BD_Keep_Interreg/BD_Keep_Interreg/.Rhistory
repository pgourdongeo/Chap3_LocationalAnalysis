Projects <- read.csv2("DataSource/Keep_ClosedProject_LeadPartner_Project.csv", stringsAsFactors = F, fileEncoding = "UTF-8")
library(tidyverse)
library(skimr)
skim(Projects)
Partners <- read.csv2("DataSource/Keep_ClosedProject_Partner.csv", stringsAsFactors = F, fileEncoding = "UTF-8")
skim(Partners)
View(Projects)
View(Partners)
View(Projects)
View(Partners)
install.packages("photon")
devtools::install_github(repo = 'rCarto/photon')
View(Partners)
Partners$location <- paste(Partners$Postal.code, ", ", Partners$Town, ", ", Partners$Country)
View(Partners)
library(photon)
GeoCoord <- geocode(Partners$location, limit = 1)
Partners$location <- paste(Partners$Town, ", ", Partners$Country)
PartnerLocation <- Partners$location %>% distinct()
View(Partners)
PartnerLocation <- Partners$location %>% unique()
Partners$Town <- trimws(Partners$Town)
Partners$location <- paste(Partners$Town,", ",Partners$Country)
Partners$Town <- trimws(Partners$Town)
Partners$location <- paste(Partners$Town,",",Partners$Country)
View(Partners)
View(Partners)
PartnerLocation <- Partners$location %>% unique()
library(photon)
GeoCoord <- geocode(PartnerLocation, limit = 1)
Partners$Town <- trimws(Partners$Town)
Partners$location <- paste(Partners$Town,", ",Partners$Country, sep = "")
View(Partners)
PartnerLocation <- Partners$location %>% unique()
City <- Partners$Town
City <- Partners$Town %>% unique()
library(httr)
library(jsonlite)
P <- sample(PartnerLocation, size = 10)
GeoCoord <- geocode(p, limit = 1)
P <- sample(PartnerLocation, size = 10)
GeoCoord <- geocode(p, limit = 1)
GeoCoord <- geocode(P, limit = 1)
View(GeoCoord)
GeoCoord <- geocode(P, limit = 2)
View(GeoCoord)
Partners$location <- paste(Partners$Postal.code,", ",Partners$Town,", ",Partners$Country, sep = "")
PartnerLocation <- Partners$location %>% unique()
P <- sample(PartnerLocation, size = 10)
GeoCoord <- geocode(P, limit = 1)
Partners$Postal.code2 <- gsub("\\s", "", Partners$Postal.code)
Partners$location <- paste(Partners$Postal.code,", ",Partners$Town,", ",Partners$Country, sep = "")
PartnerLocation <- Partners$location %>% unique()
P <- sample(PartnerLocation, size = 10)
View(GeoCoord)
Partners$location <- paste(Partners$Postal.code2,", ",Partners$Town,", ",Partners$Country, sep = "")
PartnerLocation <- Partners$location %>% unique()
P <- sample(PartnerLocation, size = 10)
GeoCoord <- geocode(P, limit = 1)
View(GeoCoord)
urlygi <- "https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&q=paris&sort=population&facet=country"
blob <- fromJSON(urlygi)
blob
blob$records => foo
blob$records -> foo
View(foo)
foo
library(glue)
baseURL <- "https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&q={ville}&sort=population&facet=country&geofilter.distance={lat}%2C{long}%2C{distance_max}"
library(glue)
glue(baseURL, ville = "Mol", long = 5.115527, lat = 51.18404)
glue(baseURL, ville = "Mol", long = 5.115527, lat = 51.18404, distance_max = 10000)
fromjson(glue(baseURL, ville = "Mol", long = 5.115527, lat = 51.18404, distance_max = 10000)) -> foo
## Get Population (admin )
City <- Partners$Town %>% unique()
foo <- fromJSON(glue(baseURL, ville = "Mol", long = 5.115527, lat = 51.18404, distance_max = 10000)) %>%
magrittr::extract("records")
View(foo)
foo <- fromJSON(glue(baseURL, ville = "Mol", long = 5.115527, lat = 51.18404, distance_max = 10000)) %>%
magrittr::extract2("records")
View(foo)
View(foo)
Partners$location <- paste(Partners$Postal.code2,", ",Partners$Town,", ",Partners$Country, sep = "")
PartnerLocation <- Partners$location %>% unique()
GeoCoord <- geocode(PartnerLocation, limit = 1)
GeoCoord <- geocode(PartnerLocation, limit = 1)
View(GeoCoord)
skim(GeoCoord)
NoGeo <- GeoCoord %>% filter(!is.na(msg))
View(NoGeo)
### Geocode remaining
library(ggmap)
geocode()??
GeoCoord2<-geocode(NoGeo$location)
geocode??
GeoCoord2<-geocode(NoGeo$location)
geocode?
GeoCoord2<-geocode(NoGeo$location)
View(GeoCoord2)
geocode?
#GeoCoord2<-geocode(NoGeo$location)
## Get Population (admin )
City <- Partners$Town %>% unique()
geocode?
#GeoCoord2<-geocode(NoGeo$location)
## Get Population (admin )
City <- Partners$Town %>% unique()
?geocode
View(NoGeo)
GeoCoord2<-geocode(location = NoGeo$location, output = "more",
source = c("google", "dsk"),messaging = FALSE )
test <- sample(NoGeo, 10)
View(test)
test <- sample(NoGeo, size=10)
test <- sample(NoGeo, size=10)
View(test)
?sample
test <- base::sample(NoGeo, size=10)
test <-sample_n(NoGeo, size=10)
View(test)
GeoCoord2<-geocode(location = test$location, output = "more",
source = c("google", "dsk"),messaging = FALSE )
View(GeoCoord2)
GeoCoord2<-geocode(location = test$location, output = "more",
source = c("google"),messaging = FALSE, override_limit = T )
GeoCoord2<-geocode(location = test$location, output = "all",
source = c("google"),messaging = FALSE, override_limit = T )
View(GeoCoord2)
View(GeoCoord2)
detach("package:ggmap", unload=TRUE)
install.packages("nominatim")
devtools::install_github("hrbrmstr/nominatim")
library(nominatim)
library("nominatim", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:nominatim", unload=TRUE)
install.packages("rlang")
library("nominatim", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
?osm_geocode
GeoCoord2<-osm_geocode(test$location, limit = 2, key = "X4QiiMqsB3iA7pQxkqNoNdPxA1sLDYt8")
View(GeoCoord2)
osm_geocode(test$location, limit = 2, key = "X4QiiMqsB3iA7pQxkqNoNdPxA1sLDYt8")
View(test)
osm_geocode(test$location, limit = 2)
osm_geocode(test$location, limit = 2,key = "X4QiiMqsB3iA7pQxkqNoNdPxA1sLDYt8")
test <-sample_n(NoGeo, size=10)
library(tidyverse)
library(skimr)
osm_geocode(test$location, limit = 2,key = "X4QiiMqsB3iA7pQxkqNoNdPxA1sLDYt8")
test <-sample_n(NoGeo, size=10)
osm_geocode(test$location, limit = 2,key = "X4QiiMqsB3iA7pQxkqNoNdPxA1sLDYt8")
View(NoGeo)
library(photon)
test <-geocode(test$location, limit = 2)
View(test)
?geocode
View(NoGeo)
View(Partners)
Partners$location <- paste(Partners$Postal.code,", ",Partners$Town,", ",Partners$Country, sep = "")
Partners$location2 <- paste(Partners$Town,", ",Partners$Country, sep = "")
PartnerLocation <- Partners$location %>% unique()
GeoCoord <- geocode(PartnerLocation, limit = 1)
skim(GeoCoord)
View(GeoCoord)
NoGeo <- GeoCoord %>% filter(!is.na(msg))
View(NoGeo)
### Geocode remaining
write.csv2(GeoCoord, file = "GeoCoord.csv", row.names = F, fileEncoding = "UTF-8")
library(skimr)
library(tidyverse)
library(photon)
library(sp)
library(cartography)
library(sf)
library(sf)
library("sf", lib.loc="/opt/R/3.5.0/lib64/R/library")
detach("package:sf", unload=TRUE)
install.packages("sf")
library(sf)
detach("package:sf", unload=TRUE)
install.packages("rgeos")
install.packages("rgdal")
install.packages("sf")
library(sf)
library("rgdal", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("rgeos", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:rgdal", unload=TRUE)
detach("package:rgeos", unload=TRUE)
library(tidyverse)
library(skimr)
library(photon)
library(sp)
library(cartography)
library(sf)
install.packages("tidyverse")
install.packages("tidylog")
library(tidylog)
library(tidyverse)
library(tidylog)
library(skimr)
library(photon)
library(countrycode)
library(cartography)
library(sf)
library(sf)
library(sf)
library("sf", lib.loc="/opt/R/3.5.0/lib64/R/library")
detach("package:sf", unload=TRUE)
remove.packages("sf", lib="/opt/R/3.5.0/lib64/R/library")
remove.packages("sf", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
library("sf", lib.loc="/opt/R/3.5.0/lib64/R/library")
detach("package:sf", unload=TRUE)
library("sf", lib.loc="/opt/R/3.5.0/lib64/R/library")
remove.packages("sf", lib="/opt/R/3.5.0/lib64/R/library")
library("rgdal", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("rgeos", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("rgdal", lib.loc="/opt/R/3.5.0/lib64/R/library")
library("rgeos", lib.loc="/opt/R/3.5.0/lib64/R/library")
remove.packages("rgdal", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("rgeos", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("rgeos", lib="/opt/R/3.5.0/lib64/R/library")
remove.packages("rgdal", lib="/opt/R/3.5.0/lib64/R/library")
remove.packages("rgdal", lib="/opt/R/3.5.0/lib64/R/library")
library(sf)
library("sf", lib.loc="/opt/R/3.5.0/lib64/R/library")
detach("package:sf", unload=TRUE)
remove.packages("sf", lib="/opt/R/3.5.0/lib64/R/library")
remove.packages("sp", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
library(sf)
View(NoGeo)
library(ggmap)
NoGeo_Code <- ggmap::geocode(NoGeo$location, output = "more", source = "dsk")
NoGeo_Code <- ggmap::geocode(NoGeo$location, output = "more", source = "google", override_limit = F)
?register_google
register_google(key = "X4QiiMqsB3iA7pQxkqNoNdPxA1sLDYt8")
NoGeo_Code <- ggmap::geocode(NoGeo$location, output = "more", source = "google", override_limit = F)
View(NoGeo)
NoGeo <- NoGeo %>% mutate(location2 = tolower(location))
library(tidyverse)
library(tidylog)
library(skimr)
library(photon)
library(countrycode)
library(cartography)
library(sf)
NoGeo <- GeoCoord %>% filter(!is.na(msg))
NoGeo <- NoGeo %>% mutate(location2 = tolower(location))
test <-sample_n(NoGeo, size=10)
NoGeo <- NoGeo %>% mutate(location2 = trimws(tolower(location)))
View(NoGeo)
testreturn <- geocode(NoGeo$location2, limit = 2)
test <-sample_n(NoGeo, size=10)
testreturn <- geocode(test$location2, limit = 2)
View(testreturn)
View(Partners)
#write.csv2(GeoCoord, file = "GeoCoord.csv", row.names = F, fileEncoding = "UTF-8")
### Geocode remaining
# Get non-geocode entities
NoGeo <- GeoCoord %>% filter(!is.na(msg))
NoGeoPartners <- NoGeo %>% left_join(Partners, by = "location")
View(NoGeoPartners)
NoGeo <- NoGeo %>% mutate(location2 = trimws(tolower(location)))%>% filter(!duplicated(location))
NoGeoPartners <- NoGeo %>% left_join(Partners, by = "location")%>% filter(!duplicated(location))
#NoGeo <- NoGeo %>% mutate(location2 = trimws(tolower(location)))
test <-sample_n(NoGeoPartners, size=10)
View(NoGeoPartners)
View(Partners)
#write.csv2(GeoCoord, file = "GeoCoord.csv", row.names = F, fileEncoding = "UTF-8")
### Geocode remaining
# Get non-geocode entities
NoGeo <- GeoCoord %>% filter(!is.na(msg))
NoGeoPartners <- NoGeo %>% left_join(Partners, by = "location")%>% filter(!duplicated(location))
View(NoGeoPartners)
#NoGeo <- NoGeo %>% mutate(location2 = trimws(tolower(location)))
test <-sample_n(NoGeoPartners, size=10)
testreturn <- geocode(test$location2, limit = 2)
View(test)
#NoGeo <- NoGeo %>% mutate(location2 = trimws(tolower(location)))
test <-sample_n(NoGeoPartners, size=10)
View(test)
View(testreturn)
View(testreturn)
View(NoGeoPartners)
NoGeoPartners <- NoGeoPartners %>% mutate(location3 = paste(Street,Postal.code, Town, Country, sep = ","))
View(NoGeoPartners)
NoGeoPartners <- NoGeoPartners %>% mutate(location3 = paste(Street,Postal.code, Town, Country, sep = ", "))
View(NoGeoPartners)
#NoGeo <- NoGeo %>% mutate(location2 = trimws(tolower(location)))
test <-sample_n(NoGeoPartners, size=10)
testreturn <- geocode(test$location3, limit = 1)
View(testreturn)
testreturn <- geocode(test$location3, limit = 1)
View(testreturn)
NoGeoPartners <- NoGeo %>% left_join(Partners, by = "location")%>% filter(!duplicated(location))
NoGeoPartners <- NoGeoPartners %>% mutate(location3 = paste(Street,Postal.code, Town, Country, sep = ", "))
#NoGeo <- NoGeo %>% mutate(location2 = trimws(tolower(location)))
test <-sample_n(NoGeoPartners, size=10)
testreturn <- geocode(test$location3, limit = 1)
testreturn <- geocode(test$location2, limit = 1)
View(testreturn)
library(geonames)
library(geonames)
GNsearch(test$location3)
options(geonamesUsername="pgourdon")
GNsearch(test$location3)
GNsearch(q =test$location3)
options(geonamesHost = "api.geonames.org/search?")
source(system.file("tests","testing.R",package="geonames"),echo=TRUE)
source(system.file("tests","testing.R",package="geonames"),echo=TRUE)
library("rjson", lib.loc="/opt/R/3.5.0/lib64/R/library")
source(system.file("tests","testing.R",package="geonames"),echo=TRUE)
options(geonamesHost = "api.geonames.org")
source(system.file("tests","testing.R",package="geonames"),echo=TRUE)
options(geonamesUsername="pgourdon")
options(geonamesHost = "api.geonames.org")
library(geonames)
options(geonamesUsername="pgourdon")
options(geonamesHost = "api.geonames.org")
source(system.file("tests","testing.R",package="geonames"),echo=TRUE)
options(geonamesUsername="pgourdon")
options(geonamesHost = "api.geonames.org")
source(system.file("tests","testing.R",package="geonames"),echo=TRUE)
options(geonamesHost = "api.geonames.org/")
source(system.file("tests","testing.R",package="geonames"),echo=TRUE)
